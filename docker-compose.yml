version: '3'
services:

  postgres:
    image: bitnami/postgresql:latest
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=postgres


  pgbouncer:
    image: bitnami/pgbouncer:latest
    environment:
      - POSTGRESQL_USERNAME=postgres
      - POSTGRESQL_PASSWORD=postgres
      - POSTGRESQL_HOST=postgres
      - POSTGRESQL_DATABASE=postgres
      - MAX_CLIENT_CONN=5
      - PGBOUNCER_POOL_MODE=transaction
      - PGBOUNCER_PORT=6432
      - ADMIN_USERS=postgres
      - PGBOUNCER_IGNORE_STARTUP_PARAMETERS=extra_float_digits
    ports:
      - "6432:6432"
    depends_on:
      - postgres

  go-app:
    container_name: go-app
    image: francescoxx/go-app:1.0.0
    build: ./back/go
    environment:
      DATABASE_URL: "host=pgbouncer user=postgres password=postgres dbname=postgres port=6432 sslmode=disable"
    #    ports:
    #      - "8050:8050"
    depends_on:
      - pgbouncer

  flask:
    build: ./back/flask  # Path to your Flask application's Dockerfile
    depends_on:
      - pgbouncer
  #    ports:
  #      - "5000:5000"  # Map container port 80 to host port 5000  # Map your application code into the container



  tornado:
    build: ./back/tornado  # Path to your Flask application's Dockerfile
    depends_on:
      - pgbouncer
  #    ports:
  #      - "5000:5000"  # Map container port 80 to host port 5000  # Map your application code into the container

  rust:
    build: ./back/rust
    depends_on:
      - pgbouncer


  nginx:
    container_name: nginx
    image: nginx:latest
    ports:
      - "9999:9999"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - go-app
      - flask
      - tornado


  jaeger:
    image: jaegertracing/all-in-one
    ports:
      - "16686:16686"
      - "6831:6831/udp"

  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"




    #  service2:
    #    image: your-service2-image
    #    labels:
    #      - "traefik.enable=true"
    #      - "traefik.http.routers.service2.rule=Host(`service2.example.com`)"
    #      - "traefik.http.routers.service2.entrypoints=web"
    #      - "traefik.http.routers.service2.middlewares=service2"
    # Add other service-specific configuration here


volumes:
  pg_data: