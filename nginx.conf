events {
    worker_connections 1024;
    multi_accept on;
    use epoll;
    accept_mutex on;
}

http {

    error_log /dev/null emerg;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    upstream backend {
        keepalive 4;
        least_conn;
        server golang:8050 ;
        server flask:5000 ;
        server tornado:8888 ;
        server rust:8060 ;
    }

    server {
        listen 9999;
        server_name localhost;

        location / {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, PATCH, DELETE';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range, Backend-Type';
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header "Connection" "";
            proxy_next_upstream error timeout http_500;
        }

        location /nginx_status {
            stub_status on;
            access_log off;
            allow all;
            deny all;
        }
    }
}



